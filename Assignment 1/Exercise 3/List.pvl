class list {

  int val;
  list next;

  resource state(frac p)=p!=none ** p<=write ** Perm(val,p) ** Perm(next,p) ** next->state(p);

  given frac p;
  requires p!=none && p<=write;
  requires n->state(p);
  static seq<int> contents(list n)=
    n==null?seq<int>{}:(unfolding n.state(p) in (seq<int>{n.val}+(contents(n.next) with {p = p;})));

  requires n->state(1);
  ensures  state(1);
  ensures (contents(this) with {p=1;})==seq<int>{v}+(\old(contents(n) with {p=1;}));
  list(int v,list n){
    val=v;
    next=n;
    fold state(1);
  }
 
  requires state(1);
  ensures state(1);
  void main(){
    list n=null;
   list l1;
   list l1n = null;
   list l2;
   list l2n = null;
   list l3=null;
    list test=null;
   int lengthl1;

    assert (contents(n) with {p=1;})==seq<int>{};
    n=new list(37,n);
    assert (contents(n) with {p=1;})==seq<int>{37};

   l1 = new list(1, new list(2, l1n));
    assert (contents(l1) with {p=1;})==seq<int>{1,2};
   l2 = new list(3, new list(4, l2n));
   assert (contents(l2) with {p=1;})==seq<int>{3,4};

   l3 = append(l1,l2);
   assert (contents(l3) with {p=1;})==seq<int>{1,2,3,4};

   lengthl1 = getlength(l3) with {p=1;};
   assert lengthl1==4;
  }

  requires l1->state(1) ** l2->state(1);
  ensures \result->state(1);
  ensures (contents(\result) with {p=1;})==(\old(contents(l1) with {p=1;})+(\old(contents(l2) with {p=1;})));
  list append(list l1,list l2){
    if (l1==null){
     return l2;
    } else {      
      unfold l1.state(1);
      list n=l1.next;

      l1.next=append(l1.next,l2);
  
      fold l1.state(1);   
  
      return l1;
    }

  }
 
  given frac p;
  requires p!=none && p<=write;
  requires l->state(p);
  ensures l->state(p);
  ensures (contents(l) with {p=p;})==(\old(contents(l) with {p=p;}));
  ensures \result==|contents(l) with {p=p;}|;
  int getlength(list l){
    int res;
    if (l==null){
      res=0;
    } else {
    unfold l.state(p);
      res=1+getlength(l.next) with { p = p; };
    fold l.state(p); 
    }  
  return res;
  }

}
