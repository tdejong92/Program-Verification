class tree {
  int val;
  tree left;
  tree right;

  resource state() = Perm(val,1) ** Perm(left,1) ** left->state() ** Perm(right,1) ** right->state();

  requires state();
  seq<int> contents()=unfolding state() in (left==null?(right==null?seq<int>{val}:seq<int>{val}+right.contents()):(right==null?seq<int>{val}+left.contents():seq<int>{val}+left.contents()+right.contents()));

  requires state();
  int get_val()=unfolding state() in (val);

  requires state();
  tree get_left()=unfolding state() in (left);

  requires state();
  tree get_right()=unfolding state() in (right);

  requires left->state() ** right->state();
  ensures state();
  ensures get_left()==left;
  ensures get_val()==val;
  ensures get_right()==right;
  tree(tree left,int val,tree right){
    this.left=left;
    this.val=val;
    this.right=right;
  fold state();
  }

  static int f(int x)=x*2;

  static boolean mapf(seq<int>l1,seq<int> l2)= |l1| == |l2| &&
    (\forall int i; 0 <= i && i < |l1| ; l1[i]==f(l2[i]));

  requires state();
  ensures state();
  ensures mapf(contents(),\old(contents()));
  void map_sequential(){
  unfold state();
    if (left!=null){
        left.map_sequential();
    }
    val=f(val);
    if (right!=null){
        right.map_sequential();
    }
  fold state();
  }

  requires state();
  ensures state();
  ensures mapf(contents(),\old(contents()));
  void map_parallel(){
    task t=new task(this);
    t.run();
  }
}
class task {
  tree t;
  seq<int> oldcontents;

  requires t->state();
  static seq<int> ct(tree t)= ((t==null) ? seq<int>{} : t.contents());    

  requires t->state();
  ensures t->state();
  ensures Perm(this.t,1) ** Value(oldcontents) ** this.t==t ** this.oldcontents==ct(t) ** ct(t)==\old(ct(t));
  task(tree t){
    this.t=t;
   this.oldcontents=ct(t);
  }

  requires Perm(t,1/2) ** t->state() ** Value(oldcontents) ** oldcontents==ct(t);
  ensures Perm(t,1/2) ** t->state() ** Value(oldcontents);
  ensures t.mapf(ct(t),oldcontents);    // HOW TO DO THIS?
  void run(){
    if (t!=null) {
    unfold t.state();
      task t1=new task(t.left);  fork t1;
      task t2=new task(t.right); fork t2;
      t.val=t.f(t.val);

      join t1;
      join t2;
    fold t.state();

    }
  }
}