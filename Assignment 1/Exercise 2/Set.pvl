class Set {

	int max;
	boolean[] contents;

	resource state(frac p)=
		Value(this.max) ** max > 0 **
		Value(this.contents) ** contents.length==max **
		(\forall int k; 0<= k && k < max ; Perm(contents[k],p));

	requires max>0;
	ensures  state(1);
	ensures this.max==max;
	ensures  (\forall int k; 0<= k && k < max ; !contents[k] );
	Set(int max){
		this.max=max;
		contents = new boolean[max];
		int i=0;
	
		loop_invariant 0<=i && i<= max;
		loop_invariant state(1);
		loop_invariant this.max==max;
		loop_invariant (\forall int k; 0<= k && k < i ; !contents[k] );
		while(i<max){
			contents[i]=false;
			i=i+1;
		}
		fold(state(1));
	}

	requires state(1);
	requires Value(x.max) ** x.max>0 ** Value(x.contents);
	requires (\forall int k; 0<= k && k < x.max ; Value(x.contents[k]));
	ensures state(1);
	ensures Value(x.max) ** x.max>0 ** Value(x.contents);
	ensures (\forall int k; 0<= k && k < x.max ; Value(x.contents[k]));
	ensures contents.length==\old(contents.length);
	ensures (max<=x.max) ? (\forall int k; 0<= k && k < max ; contents[k]==( \old(contents[k]) && x.contents[k] ) )
								: ( (\forall int k; 0<= k && k < x.max ; contents[k]==( \old(contents[k]) && 										x.contents[k] )) && (\forall int k; k>=x.max && k < max ; !contents[k] ) );
	void intersection(Set x){

		int i=0;	
		int j=0;

		if(max<=x.max) {
			loop_invariant state(1);
			loop_invariant Value(x.max) ** max>0 ** Value(x.contents);
			loop_invariant x.max>=max;
			loop_invariant (\forall* int k; 0<= k && k < x.max ; Value(x.contents[k]));
			loop_invariant 0<=i && i<=max;
			loop_invariant contents.length==\old(contents.length);
			loop_invariant (\forall int k; 0<= k && k < i ; contents[k]==( \old(contents[k]) && x.contents[k] ) );
			loop_invariant (\forall int k; i<= k && k < max ; contents[k]==\old(contents[k]));
			while(i<max){
				contents[i] = ( contents[i] && x.contents[i] ) ;
				i=i+1;
			}


		} else {
			/* max > x.max */ 
			loop_invariant state(1);
			loop_invariant Value(x.max) ** x.max>0 ** Value(x.contents);
			loop_invariant max > x.max;
			loop_invariant j>=0 && j<=x.max;			
			loop_invariant (\forall* int k; 0<= k && k < x.max ; Value(x.contents[k]));
			loop_invariant contents.length==\old(contents.length);
			loop_invariant (\forall int k; 0<= k && k < j ; contents[k]==( \old(contents[k]) && x.contents[k] ) );
			loop_invariant (\forall int k; j<= k && k < max ; contents[k]==\old(contents[k]));
			while(j<x.max){
				contents[j] = ( contents[j] && x.contents[j] ) ;
				j=j+1;
			}

						
			loop_invariant Value(this.max) ** max > 0 ** Value(this.contents) ** contents.length==max;
			loop_invariant Value(x.max) ** x.max>0 ** Value(x.contents);			
			loop_invariant max > x.max;
			loop_invariant (\forall int k; x.max<= k && k < max ; Perm(contents[k],1));
			loop_invariant j>=x.max && j<=max;
			loop_invariant contents.length==\old(contents.length);
			loop_invariant (\forall int k; k>=x.max && k < j ; !contents[k] );
			while(j<max) {
				contents[j]=false;
				j=j+1;
			}
assert (\forall int k; 0<=k && k < x.max ; contents[k]==( \old(contents[k]) && x.contents[k] ) );
		}
	}
}
