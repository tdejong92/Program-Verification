class Set {

	int max;
	boolean[] contents;

	resource state(frac p)=
		Value(this.max) ** max > 0 **
		Value(this.contents) ** contents.length==max **
		(\forall int k; 0<= k && k < max ; Perm(contents[k],p));

	requires max>0;
	ensures  state(1);
	ensures this.max==max;
	ensures  (\forall int k; 0<= k && k < max ; !contents[k] );
	Set(int max){
		this.max=max;
		contents = new boolean[max];
		int i=0;
	
		loop_invariant 0<=i && i<= max;
		loop_invariant state(1);
		loop_invariant this.max==max;
		loop_invariant (\forall int k; 0<= k && k < i ; !contents[k] );
		while(i<max){
			contents[i]=false;
			i=i+1;
		}
		fold(state(1));
	}
	requires state(1);
	requires x!=null ** Value(x.max) ** Value(x.contents) ** (\forall int k; 0<=k && k<x.max; Value(x.contents[k]));
	ensures state(1);
	void intersection(Set x){

		int i=0;	
		int j=0;

		if(max<=x.max) {
			loop_invariant state(1);
			loop_invariant 0<=i && i<=max;
			loop_invariant x!=null ** Value(x.max) ** Value(x.contents) ** (\forall int k; k>=0 && k<x.max; Value(x.contents[k]));
			loop_invariant max<=x.max;
			while(i<max){	
				contents[i] = ( contents[i] );//&& x.contents[i] ) ;
				i=i+1;
			}
		} else {
			assume false;
			while(j<x.max){
				contents[j] = ( contents[j] && x.contents[j] ) ;
				j=j+1;
			}
			while(j<max) {
				contents[j]=false;
				j=j+1;
			}				
		}
	}
}

